<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
    <!-- Falcor ObjectID -->
    <Type Name="Falcor::ObjectID&lt;*,*,*&gt;">
        <DisplayString Condition="mID != kInvalidID">{mID}</DisplayString>
        <DisplayString Condition="mID == kInvalidID">InvalidID</DisplayString>
    </Type>
    <!-- These were adapted from https://github.com/g-truc/glm/blob/master/util/glm.natvis -->
    <!-- License: https://github.com/g-truc/glm/blob/master/manual.md#section0 -->
    <Type Name="glm::tvec1&lt;*&gt;">
        <DisplayString>{x}</DisplayString>
        <Expand>
            <Item Name="x">x</Item>
        </Expand>
    </Type>
    <Type Name="glm::tvec2&lt;*&gt;">
        <DisplayString>{x}, {y}</DisplayString>
        <Expand>
            <Item Name="x">x</Item>
            <Item Name="y">y</Item>
        </Expand>
    </Type>
    <Type Name="glm::tvec3&lt;*&gt;">
        <DisplayString>{x}, {y}, {z}</DisplayString>
        <Expand>
            <Item Name="x">x</Item>
            <Item Name="y">y</Item>
            <Item Name="z">z</Item>
        </Expand>
    </Type>
    <Type Name="glm::tvec4&lt;*&gt;">
        <DisplayString>{x}, {y}, {z}, {w}</DisplayString>
        <Expand>
            <Item Name="x">x</Item>
            <Item Name="y">y</Item>
            <Item Name="z">z</Item>
            <Item Name="w">w</Item>
        </Expand>
    </Type>
    <Type Name="glm::tmat4x4&lt;*&gt;">
        <DisplayString>[{value[0],g}] [{value[1],g}] [{value[2],g}] [{value[3],g}]</DisplayString>
        <Expand>
            <Synthetic Name="[col 0]">
                <DisplayString>[{value[0]}]</DisplayString>
            </Synthetic>
            <Synthetic Name="[col 1]">
                <DisplayString>[{value[1]}]</DisplayString>
            </Synthetic>
            <Synthetic Name="[col 2]">
                <DisplayString>[{value[2]}]</DisplayString>
            </Synthetic>
            <Synthetic Name="[col 3]">
                <DisplayString>[{value[3]}]</DisplayString>
            </Synthetic>
        </Expand>
    </Type>
    <Type Name="glm::tquat&lt;*&gt;">
        <DisplayString>({x}, {y}, {z}), {w}</DisplayString>
        <Expand>
            <Item Name="x">x</Item>
            <Item Name="y">y</Item>
            <Item Name="z">z</Item>
            <Item Name="w">w</Item>
        </Expand>
    </Type>
    <Type Name="glm::tdualquat&lt;*&gt;">
        <DisplayString>(({real.x}, {real.y}, {real.z}), {real.w}), (({dual.x}, {dual.y}, {dual.z}), {dual.w})</DisplayString>
        <Expand>
            <Item Name="real">real</Item>
            <Item Name="dual">dual</Item>
        </Expand>
    </Type>
    <!-- These were copied from https://github.com/nlohmann/json/blob/develop/nlohmann_json.natvis -->
    <!-- License: https://github.com/nlohmann/json/blob/develop/LICENSE.MIT -->
    <Type Name="nlohmann::basic_json&lt;*&gt;">
        <DisplayString Condition="m_type == nlohmann::detail::value_t::null">null</DisplayString>
        <DisplayString Condition="m_type == nlohmann::detail::value_t::object">{*(m_value.object)}</DisplayString>
        <DisplayString Condition="m_type == nlohmann::detail::value_t::array">{*(m_value.array)}</DisplayString>
        <DisplayString Condition="m_type == nlohmann::detail::value_t::string">{*(m_value.string)}</DisplayString>
        <DisplayString Condition="m_type == nlohmann::detail::value_t::boolean">{m_value.boolean}</DisplayString>
        <DisplayString Condition="m_type == nlohmann::detail::value_t::number_integer">{m_value.number_integer}</DisplayString>
        <DisplayString Condition="m_type == nlohmann::detail::value_t::number_unsigned">{m_value.number_unsigned}</DisplayString>
        <DisplayString Condition="m_type == nlohmann::detail::value_t::number_float">{m_value.number_float}</DisplayString>
        <DisplayString Condition="m_type == nlohmann::detail::value_t::discarded">discarded</DisplayString>
        <Expand>
            <ExpandedItem Condition="m_type == nlohmann::detail::value_t::object">
                *(m_value.object),view(simple)
            </ExpandedItem>
            <ExpandedItem Condition="m_type == nlohmann::detail::value_t::array">
                *(m_value.array),view(simple)
            </ExpandedItem>
        </Expand>
    </Type>
    <!--    skip the pair first/second members in the treeview while traversing a map.
            Only works in VS 2015 Update 2 and beyond using the new visualization -->
    <Type Name="std::pair&lt;*, nlohmann::basic_json&lt;*&gt;&gt;" IncludeView="MapHelper">
        <DisplayString>{second}</DisplayString>
        <Expand>
            <ExpandedItem>second</ExpandedItem>
        </Expand>
    </Type>
</AutoVisualizer>
