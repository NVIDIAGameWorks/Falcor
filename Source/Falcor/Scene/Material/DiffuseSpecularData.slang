/***************************************************************************
 # Copyright (c) 2015-23, NVIDIA CORPORATION. All rights reserved.
 #
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions
 # are met:
 #  * Redistributions of source code must retain the above copyright
 #    notice, this list of conditions and the following disclaimer.
 #  * Redistributions in binary form must reproduce the above copyright
 #    notice, this list of conditions and the following disclaimer in the
 #    documentation and/or other materials provided with the distribution.
 #  * Neither the name of NVIDIA CORPORATION nor the names of its
 #    contributors may be used to endorse or promote products derived
 #    from this software without specific prior written permission.
 #
 # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS "AS IS" AND ANY
 # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **************************************************************************/
#pragma once
#include "Utils/HostDeviceShared.slangh"

BEGIN_NAMESPACE_FALCOR

/** Parameters for a DiffuseSpecularBRDF approximation.
    The fields represent a best fit diffuse/GGX approximation of a target BRDF.
*/
struct DiffuseSpecularData
{
    float3 baseColor;   ///< Base color in linear space.
    float roughness;    ///< Linearly perceptual roughness. The specular lobe uses the squared roughness.
    float specular;
    float metallic;
    float lossValue;    ///< Loss value when fitted to a target BRDF. Not used for rendering.

#ifdef HOST_CODE
    bool operator== (const DiffuseSpecularData& other) const
    {
        if (any(baseColor != other.baseColor)) return false;
        if (roughness != other.roughness) return false;
        if (specular != other.specular) return false;
        if (metallic != other.metallic) return false;
        if (lossValue != other.lossValue) return false;
        return true;
    }
    bool operator!= (const DiffuseSpecularData& other) const
    {
        return !(*this == other);
    }
#endif
};

END_NAMESPACE_FALCOR
