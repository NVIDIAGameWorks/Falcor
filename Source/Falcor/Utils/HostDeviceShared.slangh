/***************************************************************************
 # Copyright (c) 2015-22, NVIDIA CORPORATION. All rights reserved.
 #
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions
 # are met:
 #  * Redistributions of source code must retain the above copyright
 #    notice, this list of conditions and the following disclaimer.
 #  * Redistributions in binary form must reproduce the above copyright
 #    notice, this list of conditions and the following disclaimer in the
 #    documentation and/or other materials provided with the distribution.
 #  * Neither the name of NVIDIA CORPORATION nor the names of its
 #    contributors may be used to endorse or promote products derived
 #    from this software without specific prior written permission.
 #
 # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS "AS IS" AND ANY
 # EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 # PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 # OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **************************************************************************/
#pragma once

/*******************************************************************
                    Glue code for CPU/GPU compilation
*******************************************************************/

#if (defined(__STDC_HOSTED__) || defined(__cplusplus))   // we're in C-compliant compiler, probably host
#define HOST_CODE 1
#endif

// TODO: Replace by bit packing functions
#define EXTRACT_BITS(bits, offset, value) (((value) >> (offset)) & ((1 << (bits)) - 1))
#define PACK_BITS(bits, offset, flags, value) ((((value) & ((1 << (bits)) - 1)) << (offset)) | ((flags) & (~(((1 << (bits)) - 1) << (offset)))))
#define PACK_BITS_UNSAFE(bits, offset, flags, value) (((value) << (offset)) | ((flags) & (~(((1 << (bits)) - 1) << (offset)))))

#ifdef HOST_CODE
/*******************************************************************
                    CPU declarations
*******************************************************************/
#define BEGIN_NAMESPACE_FALCOR namespace Falcor{
#define END_NAMESPACE_FALCOR }
#define SETTER_DECL
#define CONST_FUNCTION const

#include "Utils/Math/Vector.h"
#include "Utils/Math/Float16.h"
#include "glm/packing.hpp"
#include <algorithm>

namespace Falcor
{
    using uint = uint32_t;
    using float3x3 = glm::float3x3;
    using float3x4 = glm::float3x4;
    using float4x4 = glm::float4x4;

    inline float f16tof32(uint v) { return glm::unpackHalf2x16(v).x; }
    inline float2 f16tof32(uint2 v) { return { f16tof32(v.x), f16tof32(v.y) }; };
    inline float3 f16tof32(uint3 v) { return { f16tof32(v.x), f16tof32(v.y), f16tof32(v.z) }; };
    inline float4 f16tof32(uint4 v) { return { f16tof32(v.x), f16tof32(v.y), f16tof32(v.z), f16tof32(v.w) }; };

    inline uint f32tof16(float v) { return glm::packHalf2x16({ v, 0.f }); }
    inline uint2 f32tof16(float2 v) { return { f32tof16(v.x), f32tof16(v.y) }; }
    inline uint3 f32tof16(float3 v) { return { f32tof16(v.x), f32tof16(v.y), f32tof16(v.z) }; }
    inline uint4 f32tof16(float4 v) { return { f32tof16(v.x), f32tof16(v.y), f32tof16(v.z), f32tof16(v.w) }; }

    inline float saturate(float v) { return std::max(0.0f, std::min(1.0f, v)); }
    inline float2 saturate(float2 v) { return float2(saturate(v.x), saturate(v.y)); }
    inline float3 saturate(float3 v) { return float3(saturate(v.x), saturate(v.y), saturate(v.z)); }
    inline float4 saturate(float4 v) { return float4(saturate(v.x), saturate(v.y), saturate(v.z), saturate(v.w)); }

    /** Generic reinterpret/bit cast.
        TODO: Replace by std::bit_cast<T> when it is available in Visual Studio.
    */
    template<typename T, typename F>
    const T bit_cast(const F& from) noexcept
    {
        static_assert(sizeof(T) == sizeof(F));
        T result;
        memcpy(&result, &from, sizeof(from));
        return result;
    }

    inline float asfloat(uint32_t i) { return bit_cast<float>(i); }
    inline float asfloat(int32_t i) { return bit_cast<float>(i); }
    inline float16_t asfloat16(uint16_t i) { return bit_cast<float16_t>(i); }
    inline uint32_t asuint(float f) { return bit_cast<uint32_t>(f); }
    inline int32_t asint(float f) { return bit_cast<int32_t>(f); }
    inline uint16_t asuint16(float16_t f) { return bit_cast<uint16_t>(f); }
}

#else // HOST_CODE

/*******************************************************************
                    HLSL declarations
*******************************************************************/
#define inline
#define SETTER_DECL [mutating]
#define BEGIN_NAMESPACE_FALCOR
#define END_NAMESPACE_FALCOR
#define CONST_FUNCTION

#endif // HOST_CODE
