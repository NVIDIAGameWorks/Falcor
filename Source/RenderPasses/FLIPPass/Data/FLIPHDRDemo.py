# FLIP GitHub repository: https://github.com/NVlabs/flip.

# A render graph that creates a reference image and a test image
# and compares them using HDR-FLIP. The reference is an accumulation
# of 1 spp path traced images while the test is generated by
# rendering 1 spp path traced images, followed
# by denoising with the SVGF denoiser.
def render_graph_HDRFLIPDemo():
    g = RenderGraph("HDRFLIPDemo")
    loadRenderPassLibrary("AccumulatePass.dll")
    loadRenderPassLibrary("GBuffer.dll")
    loadRenderPassLibrary("MegakernelPathTracer.dll")
    loadRenderPassLibrary("SVGFPass.dll")
    loadRenderPassLibrary("FLIPPass.dll")

    # Generate G-buffer
    GBufferRaster = createPass("GBufferRaster", {'cull': CullMode.CullBack})
    g.addPass(GBufferRaster, "GBufferRaster")

    ######################################################################################################
    ##########             Reference graph (accumulated path tracer results)                ##############
    ######################################################################################################
    PathTracerReference = createPass("MegakernelPathTracer", {'params': PathTracerParams(useVBuffer=0), 'sampleGenerator': 0, 'emissiveSampler': EmissiveLightSamplerType.Uniform})
    g.addPass(PathTracerReference, "PathTracerReference")
    AccumulatePass = createPass("AccumulatePass", {'enabled': True, 'precisionMode': AccumulatePrecision.Single, 'maxAccumulatedFrames': 2 ** 16})
    g.addPass(AccumulatePass, "AccumulatePass")

    g.addEdge("GBufferRaster.posW", "PathTracerReference.posW")
    g.addEdge("GBufferRaster.normW", "PathTracerReference.normalW")
    g.addEdge("GBufferRaster.tangentW", "PathTracerReference.tangentW")
    g.addEdge("GBufferRaster.faceNormalW", "PathTracerReference.faceNormalW")
    g.addEdge("GBufferRaster.mtlData", "PathTracerReference.mtlData")
    g.addEdge("GBufferRaster.texC", "PathTracerReference.texC")
    g.addEdge("GBufferRaster.texGrads", "PathTracerReference.texGrads")
    g.addEdge("PathTracerReference.color", "AccumulatePass.input")


    ######################################################################################################
    ##########              Test graph (SVGF on top of path tracer results)                 ##############
    ##########       NOTE: This graph can be replaced with your own rendering setup         ##############
    ######################################################################################################
    PathTracerTest = createPass("MegakernelPathTracer", {'params': PathTracerParams(useVBuffer=0), 'sampleGenerator': 0, 'emissiveSampler': EmissiveLightSamplerType.Uniform})
    g.addPass(PathTracerTest, "PathTracerTest")
    SVGFPass = createPass("SVGFPass", {'Enabled': True, 'Iterations': 4, 'FeedbackTap': 1, 'VarianceEpsilon': 1.0e-4, 'PhiColor': 10.0, 'PhiNormal': 128.0, 'Alpha': 0.05, 'MomentsAlpha': 0.2})
    g.addPass(SVGFPass, "SVGFPass")

    g.addEdge("GBufferRaster.posW", "PathTracerTest.posW")
    g.addEdge("GBufferRaster.normW", "PathTracerTest.normalW")
    g.addEdge("GBufferRaster.tangentW", "PathTracerTest.tangentW")
    g.addEdge("GBufferRaster.faceNormalW", "PathTracerTest.faceNormalW")
    g.addEdge("GBufferRaster.mtlData", "PathTracerTest.mtlData")
    g.addEdge("GBufferRaster.texC", "PathTracerTest.texC")
    g.addEdge("GBufferRaster.texGrads", "PathTracerTest.texGrads")

    g.addEdge("GBufferRaster.emissive", "SVGFPass.Emission")
    g.addEdge("GBufferRaster.posW", "SVGFPass.WorldPosition")
    g.addEdge("GBufferRaster.normW", "SVGFPass.WorldNormal")
    g.addEdge("GBufferRaster.pnFwidth", "SVGFPass.PositionNormalFwidth")
    g.addEdge("GBufferRaster.linearZ", "SVGFPass.LinearZ")
    g.addEdge("GBufferRaster.mvec", "SVGFPass.MotionVec")
    g.addEdge("PathTracerTest.color", "SVGFPass.Color")
    g.addEdge("PathTracerTest.albedo", "SVGFPass.Albedo")


    ######################################################################################################
    ##############            Compute HDR-FLIP between reference and test                   ##############
    ######################################################################################################
    FLIPPass = createPass('FLIPPass', {'enabled': True, 'isHDR': True, 'toneMapper': FLIPToneMapperType.ACES, 'useCustomExposureParameters': False, 'startExposure': 0.0, 'stopExposure': 0.0, 'numExposures': 2, 'useMagma': True, 'monitorWidthPixels': 3840, 'monitorWidthMeters': 0.7, 'monitorDistanceMeters': 0.7, 'computePooledFLIPValues': False, 'useRealMonitorInfo': False})
    g.addPass(FLIPPass, 'FLIPPass')
    g.addEdge('SVGFPass.Filtered image', 'FLIPPass.testImage')
    g.addEdge('AccumulatePass.output', 'FLIPPass.referenceImage')

    g.markOutput("FLIPPass.errorMapDisplay")
    g.markOutput("FLIPPass.exposureMapDisplay")
    g.markOutput("SVGFPass.Filtered image")
    g.markOutput("AccumulatePass.output")

    return g

m.loadScene('Arcade/Arcade.pyscene')

HDRFLIPDemo = render_graph_HDRFLIPDemo()
try: m.addGraph(HDRFLIPDemo)
except NameError: None
